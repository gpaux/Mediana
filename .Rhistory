sample.size.treatment.neg = (1-prevalence.pos) / 2 * sample.size.total
sample.size.treatment.pos = prevalence.pos / 2 * sample.size.total
# Data model
subgroup.cs1.data.model =
DataModel() +
OutcomeDist(outcome.dist = "NormalDist") +
Sample(id = "Placebo Bio-Neg",
sample.size = sample.size.placebo.neg,
outcome.par = parameters(outcome.placebo.neg)) +
Sample(id = "Placebo Bio-Pos",
sample.size = sample.size.placebo.pos,
outcome.par = parameters(outcome.placebo.pos)) +
Sample(id = "Treatment Bio-Neg",
sample.size = sample.size.treatment.neg,
outcome.par = parameters(outcome.treatment.neg)) +
Sample(id = "Treatment Bio-Pos",
sample.size = sample.size.treatment.pos,
outcome.par = parameters(outcome.treatment.pos))
# Analysis model
subgroup.cs1.analysis.model =
AnalysisModel() +
Test(id = "OP test",
samples = samples(c("Placebo Bio-Neg", "Placebo Bio-Pos"),
c("Treatment Bio-Neg", "Treatment Bio-Pos")),
method = "TTest") +
Test(id = "Bio-Pos test",
samples = samples("Placebo Bio-Pos", "Treatment Bio-Pos"),
method = "TTest") +
MultAdjProc(proc = "BonferroniAdj",
par = parameters(weight = c(0.8, 0.2))) +
MultAdjProc(proc = "HochbergAdj",
par = parameters(weight = c(0.8, 0.2)))
# Custom evaluation criterion based on weighted power
subgroup.cs1.WeightedPower = function(test.result, statistic.result, parameter)  {
alpha = parameter$alpha
v1 = parameter$v1
v2 = parameter$v2
# Broad claim: Reject OP test
broad.claim = (test.result[,1] <= alpha)
# Restricted claim: Reject Bio-Pos test but not OP test
restricted.claim = ((test.result[,1] > alpha) & (test.result[,2] <= alpha))
power = v1 * mean(broad.claim) + v2 * mean(restricted.claim)
return(power)
}
# Custom evaluation criterion based on the probability of a restricted claim
subgroup.cs1.RestrictedClaimPower = function(test.result, statistic.result, parameter)  {
alpha = parameter$alpha
# Restricted claim: Reject Bio-Pos test but not OP test
restricted.claim = ((test.result[,1] > alpha) & (test.result[,2] <= alpha))
power = mean(restricted.claim)
return(power)
}
# Evaluation model
subgroup.cs1.evaluation.model =
# Evaluation model
subgroup.cs1.evaluation.model =
EvaluationModel() +
Criterion(id = "Marginal power",
method = "MarginalPower",
tests = tests("OP test", "Bio-Pos test"),
labels = c("OP test","Bio-Pos test"),
par = parameters(alpha = 0.025)) +
Criterion(id = "Disjunctive power",
method = "DisjunctivePower",
tests = tests("OP test", "Bio-Pos test"),
labels = c("Disjunctive power"),
par = parameters(alpha = 0.025)) +
Criterion(id = "Weighted power",
method = "subgroup.cs1.WeightedPower",
tests = tests("OP test", "Bio-Pos test"),
labels = c("Weighted power"),
par = parameters(alpha = 0.025,
v1 = 1 / (1 + prevalence.pos),
v2 = prevalence.pos /
(1 + prevalence.pos))) +
Criterion(id = "Probability of a restricted claim",
method = "subgroup.cs1.RestrictedClaimPower",
tests = tests("OP test", "Bio-Pos test"),
labels = c("Probability of a restricted claim"),
par = parameters(alpha = 0.025))
# Simulation Parameters
subgroup.cs1.sim.parameters =
SimParameters(n.sims = 1000,
proc.load = "full",
seed = 42938001)
# Perform clinical scenario evaluation
subgroup.cs1.results =
CSE(subgroup.cs1.data.model,
subgroup.cs1.analysis.model,
subgroup.cs1.evaluation.model,
subgroup.cs1.sim.parameters)
# Summary of results
summary(subgroup.cs1.results)
# Presentation Model
subgroup.cs1.presentation.model = PresentationModel() +
Project(username = "Gautier Paux",
title = "Case study 1",
description = "Simulation report for case study 1 of the Subgroup Analysis in Clinical Trials") +
Section(by = "outcome.parameter") +
Table(by = "multiplicity.adjustment") +
CustomLabel(param = "multiplicity.adjustment",
label= c("Bonferroni", "Hochberg"))
# Generate Word-based report
GenerateReport(presentation.model = subgroup.cs1.presentation.model,
cse.results = subgroup.cs1.results,
report.filename = "mult-cs1-report.docx")
GenerateReport(presentation.model = subgroup.cs1.presentation.model,
cse.results = subgroup.cs1.results,
report.filename = "subgroup-cs1-report.docx")
# Load the Mediana R package
library(Mediana)
# Outcome parameters
outcome.placebo.neg = parameters(mean = 0.12, sd = 0.45)
outcome.placebo.pos = parameters(mean = 0.12, sd = 0.45)
outcome.treatment.neg = parameters(mean = 0.21, sd = 0.45)
outcome.treatment.pos = parameters(mean = 0.345, sd = 0.45)
# Sample size parameters
prevalence.pos = 0.4
sample.size.total = 310
sample.size.placebo.neg = (1-prevalence.pos) / 2 * sample.size.total
sample.size.placebo.pos = prevalence.pos / 2 * sample.size.total
sample.size.treatment.neg = (1-prevalence.pos) / 2 * sample.size.total
sample.size.treatment.pos = prevalence.pos / 2 * sample.size.total
# Data model
subgroup.cs1.data.model =
DataModel() +
OutcomeDist(outcome.dist = "NormalDist") +
Sample(id = "Placebo Bio-Neg",
sample.size = sample.size.placebo.neg,
outcome.par = parameters(outcome.placebo.neg)) +
Sample(id = "Placebo Bio-Pos",
sample.size = sample.size.placebo.pos,
outcome.par = parameters(outcome.placebo.pos)) +
Sample(id = "Treatment Bio-Neg",
sample.size = sample.size.treatment.neg,
outcome.par = parameters(outcome.treatment.neg)) +
Sample(id = "Treatment Bio-Pos",
sample.size = sample.size.treatment.pos,
outcome.par = parameters(outcome.treatment.pos))
# Analysis model
subgroup.cs1.analysis.model =
AnalysisModel() +
Test(id = "OP test",
samples = samples(c("Placebo Bio-Neg", "Placebo Bio-Pos"),
c("Treatment Bio-Neg", "Treatment Bio-Pos")),
method = "TTest") +
Test(id = "Bio-Pos test",
samples = samples("Placebo Bio-Pos", "Treatment Bio-Pos"),
method = "TTest") +
MultAdjProc(proc = "BonferroniAdj",
par = parameters(weight = c(0.8, 0.2))) +
MultAdjProc(proc = "HochbergAdj",
par = parameters(weight = c(0.8, 0.2)))
# Custom evaluation criterion based on weighted power
subgroup.cs1.WeightedPower = function(test.result, statistic.result, parameter)  {
alpha = parameter$alpha
v1 = parameter$v1
v2 = parameter$v2
# Broad claim: Reject OP test
broad.claim = (test.result[,1] <= alpha)
# Restricted claim: Reject Bio-Pos test but not OP test
restricted.claim = ((test.result[,1] > alpha) & (test.result[,2] <= alpha))
power = v1 * mean(broad.claim) + v2 * mean(restricted.claim)
return(power)
}
# Custom evaluation criterion based on the probability of a restricted claim
subgroup.cs1.RestrictedClaimPower = function(test.result, statistic.result, parameter)  {
alpha = parameter$alpha
# Restricted claim: Reject Bio-Pos test but not OP test
restricted.claim = ((test.result[,1] > alpha) & (test.result[,2] <= alpha))
power = mean(restricted.claim)
return(power)
}
# Evaluation model
subgroup.cs1.evaluation.model =
EvaluationModel() +
Criterion(id = "Marginal power",
method = "MarginalPower",
tests = tests("OP test", "Bio-Pos test"),
labels = c("OP test","Bio-Pos test"),
par = parameters(alpha = 0.025)) +
Criterion(id = "Disjunctive power",
method = "DisjunctivePower",
tests = tests("OP test", "Bio-Pos test"),
labels = c("Disjunctive power"),
par = parameters(alpha = 0.025)) +
Criterion(id = "Weighted power",
method = "subgroup.cs1.WeightedPower",
tests = tests("OP test", "Bio-Pos test"),
labels = c("Weighted power"),
par = parameters(alpha = 0.025,
v1 = 1 / (1 + prevalence.pos),
v2 = prevalence.pos /
(1 + prevalence.pos))) +
Criterion(id = "Probability of a restricted claim",
method = "subgroup.cs1.RestrictedClaimPower",
tests = tests("OP test", "Bio-Pos test"),
labels = c("Probability of a restricted claim"),
par = parameters(alpha = 0.025))
# Simulation Parameters
subgroup.cs1.sim.parameters = SimParameters(n.sims = 100000,
proc.load = "full",
seed = 42938001)
# Perform clinical scenario evaluation
subgroup.cs1.results = CSE(subgroup.cs1.data.model,
subgroup.cs1.analysis.model,
subgroup.cs1.evaluation.model,
subgroup.cs1.sim.parameters)
# Summary of results
summary(subgroup.cs1.results)
# Presentation Model
subgroup.cs1.presentation.model = PresentationModel() +
Project(username = "Gautier Paux",
title = "Case study 1",
description = "Simulation report for case study 1 of the Subgroup Analysis in Clinical Trials") +
Section(by = "outcome.parameter") +
Table(by = "multiplicity.adjustment") +
CustomLabel(param = "multiplicity.adjustment",
label= c("Bonferroni", "Hochberg"))
# Generate Word-based report
GenerateReport(presentation.model = subgroup.cs1.presentation.model,
cse.results = subgroup.cs1.results,
report.filename = "subgroup-cs1-report.docx")
# Load the Mediana R package
library(Mediana)
# Outcome parameters - Scenario 1
outcome.placebo.sc1 = parameters(prop = 0.30)
outcome.dosel.sc1 = parameters(prop = 0.50)
outcome.doseh.sc1 = parameters(prop = 0.50)
# Outcome parameters - Scenario 2
outcome.placebo.sc2 = parameters(prop = 0.30)
outcome.dosel.sc2 = parameters(prop = 0.40)
outcome.doseh.sc2 = parameters(prop = 0.50)
# Outcome parameters - Scenario 3
outcome.placebo.sc3 = parameters(prop = 0.30)
outcome.dosel.sc3 = parameters(prop = 0.50)
outcome.doseh.sc3 = parameters(prop = 0.45)
# Data model
mult.cs1.data.model =
DataModel() +
OutcomeDist(outcome.dist = "BinomDist") +
SampleSize(100) +
Sample(id = "Placebo",
outcome.par = parameters(outcome.placebo.sc1,
outcome.placebo.sc2,
outcome.placebo.sc3)) +
Sample(id = "Dose L",
outcome.par = parameters(outcome.dosel.sc1,
outcome.dosel.sc2,
outcome.dosel.sc3)) +
Sample(id = "Dose H",
outcome.par = parameters(outcome.doseh.sc1,
outcome.doseh.sc2,
outcome.doseh.sc3))
# Analysis model
mult.cs1.analysis.model = AnalysisModel() +
MultAdjProc(proc = NA) +
MultAdjProc(proc = "FixedSeqAdj") +
MultAdjProc(proc = "HochbergAdj") +
Test(id = "Placebo vs Dose H",
samples = samples("Placebo", "Dose H"),
method = "PropTest") +
Test(id = "Placebo vs Dose L",
samples = samples("Placebo", "Dose L"),
method = "PropTest")
# Evaluation model
# Custom evaluation criterion: Partition-based weighted power
mult.cs1.PartitionBasedWeightedPower = function(test.result, statistic.result, parameter) {
# Parameters
alpha = parameter$alpha
weight = parameter$weight
# Outcomes
H1_only = ((test.result[,1] <= alpha) & (test.result[,2] > alpha))
H2_only = ((test.result[,1] > alpha) & (test.result[,2] <= alpha))
H1_H2 = ((test.result[,1] <= alpha) & (test.result[,2] <= alpha))
# Weighted power
power = mean(H1_only) * weight[1] + mean(H2_only) * weight[2] + mean(H1_H2) * weight[3]
return(power)
}
mult.cs1.evaluation.model = EvaluationModel() +
Criterion(id = "Marginal power",
method = "MarginalPower",
tests = tests("Placebo vs Dose H",
"Placebo vs Dose L"),
labels = c("Placebo vs Dose H",
"Placebo vs Dose L"),
par = parameters(alpha = 0.025)) +
Criterion(id = "Disjunctive power",
method = "DisjunctivePower",
tests = tests("Placebo vs Dose H",
"Placebo vs Dose L"),
labels = "Disjunctive power",
par = parameters(alpha = 0.025)) +
Criterion(id = "Weighted power",
method = "WeightedPower",
tests = tests("Placebo vs Dose H",
"Placebo vs Dose L"),
labels = "Weighted power (v1 = 0.4, v2 = 0.6)",
par = parameters(alpha = 0.025,
weight = c(0.4, 0.6))) +
Criterion(id = "Partition-based weighted power",
method = "mult.cs1.PartitionBasedWeightedPower",
tests = tests("Placebo vs Dose H",
"Placebo vs Dose L"),
labels = "Partition-based weighted power (v1 = 0.15, v2 = 0.25, v12 = 0.6)",
par = parameters(alpha = 0.025,
weight = c(0.15, 0.25, 0.6)))
# Simulation Parameters
mult.cs1.sim.parameters =  SimParameters(n.sims = 100000,
proc.load = "full",
seed = 42938001)
# Perform clinical scenario evaluation
mult.cs1.results = CSE(mult.cs1.data.model,
mult.cs1.analysis.model,
mult.cs1.evaluation.model,
mult.cs1.sim.parameters)
# Summary of results
summary(mult.cs1.results)
# Presentation Model
mult.cs1.presentation.model = PresentationModel() +
Project(username = "Gautier Paux",
title = "Case study 1",
description = "Simulation report for case study 1 of the Clinical Trials with Multiple Objectives chapter") +
Section(by = "outcome.parameter") +
Table(by = "multiplicity.adjustment") +
CustomLabel(param = "multiplicity.adjustment",
label= c("No adjustment", "Procedure F", "Procedure H")) +
CustomLabel(param = "outcome.parameter",
label=c("Scenario 1", "Scenario 2", "Scenario 3"))
# Generate Word-based report
GenerateReport(presentation.model = mult.cs1.presentation.model,
cse.results = mult.cs1.results,
report.filename = "mult-cs1-report.docx")
# Load the Mediana R package
library(Mediana)
# Outcome parameters
outcome1.placebo.neg = parameters(mean = 0.12, sd = 0.45)
outcome1.placebo.pos = parameters(mean = 0.12, sd = 0.45)
outcome1.treatment.neg = parameters(mean = 0.21, sd = 0.45)
outcome1.treatment.pos = parameters(mean = 0.345, sd = 0.45)
# Sample size parameters
prevalence.pos = 0.4
sample.size.total = 310
sample.size.placebo.neg = (1-prevalence.pos) / 2 * sample.size.total
sample.size.placebo.pos = prevalence.pos / 2 * sample.size.total
sample.size.treatment.neg = (1-prevalence.pos) / 2 * sample.size.total
sample.size.treatment.pos = prevalence.pos / 2 * sample.size.total
# Data model
subgroup.cs2.data.model =
DataModel() +
OutcomeDist(outcome.dist = "NormalDist") +
Sample(id = "Placebo Bio-Neg",
sample.size = sample.size.placebo.neg,
outcome.par = parameters(outcome1.placebo.neg)) +
Sample(id = "Placebo Bio-Pos",
sample.size = sample.size.placebo.pos,
outcome.par = parameters(outcome1.placebo.pos)) +
Sample(id = "Treatment Bio-Neg",
sample.size = sample.size.treatment.neg,
outcome.par = parameters(outcome1.treatment.neg)) +
Sample(id = "Treatment Bio-Pos",
sample.size = sample.size.treatment.pos,
outcome.par = parameters(outcome1.treatment.pos))
# Analysis model
subgroup.cs2.analysis.model =
AnalysisModel() +
Test(id = "OP test",
samples = samples(c("Placebo Bio-Neg", "Placebo Bio-Pos"),
c("Treatment Bio-Neg", "Treatment Bio-Pos")),
method = "TTest") +
Test(id = "Bio-Pos test",
samples = samples("Placebo Bio-Pos",
"Treatment Bio-Pos"),
method = "TTest") +
Statistic(id = "Effect Size in Bio-Neg",
samples = samples("Placebo Bio-Neg",
"Treatment Bio-Neg"),
method = "EffectSizeContStat") +
MultAdjProc(proc = "HochbergAdj",
par = parameters(weight = c(0.8, 0.2)))
# Custom evaluation criterion based on weighted power
subgroup.cs2.WeightedPower = function(test.result, statistic.result, parameter)  {
alpha = parameter$alpha
v1 = parameter$v1
v2 = parameter$v2
influence_threshold = parameter$influence_threshold
# Broad claim: (1) Reject OP test but not Bio-Pos or (2) Reject OP and Bio-Pos test and influence condition is met
broad.claim = ((test.result[,1] <= alpha & test.result[,2] > alpha) |
(test.result[,1] <= alpha & test.result[,2] <= alpha & statistic.result[,1] >= influence_threshold))
# Restricted claim: (1) Reject Bio-Pos test but not OP or (2) Reject Bio-Pos and OP test and influence not met
restricted.claim = ((test.result[,1] > alpha & test.result[,2] <= alpha) |
(test.result[,1] <= alpha & test.result[,2] <= alpha & statistic.result[,1] < influence_threshold))
power = v1 * mean(broad.claim) + v2 * mean(restricted.claim)
return(power)
}
# Custom evaluation criterion based on the probability of a broad claim
subgroup.cs2.BroadClaimPower = function(test.result, statistic.result, parameter)  {
alpha = parameter$alpha
influence_threshold = parameter$influence_threshold
# Broad claim: Reject OP test but not Bio-Pos test or reject both and influence condition is met
broad.claim = ((test.result[,1] <= alpha & test.result[,2] > alpha) |
(test.result[,1] <= alpha & test.result[,2] <= alpha & statistic.result[,1] >= influence_threshold))
power = mean(broad.claim)
return(power)
}
# Custom evaluation criterion based on the probability of a restricted claim
subgroup.cs2.RestrictedClaimPower = function(test.result, statistic.result, parameter)  {
alpha = parameter$alpha
influence_threshold = parameter$influence_threshold
# Restricted claim: Reject Bio-Pos test but not OP test or reject both and influence condition is not met
restricted.claim = ((test.result[,1] > alpha & test.result[,2] <= alpha) |
(test.result[,1] <= alpha & test.result[,2] <= alpha & statistic.result[,1] < influence_threshold))
power = mean(restricted.claim)
return(power)
}
# Evaluation model
subgroup.cs2.evaluation.model =
EvaluationModel() +
Criterion(id = "Marginal power",
method = "MarginalPower",
tests = tests("OP test", "Bio-Pos test"),
labels = c("OP test","Bio-Pos test"),
par = parameters(alpha = 0.025)) +
Criterion(id = "Disjunctive power",
method = "DisjunctivePower",
tests = tests("OP test", "Bio-Pos test"),
labels = c("Disjunctive power"),
par = parameters(alpha = 0.025)) +
Criterion(id = "Weighted power",
method = "subgroup.cs2.WeightedPower",
tests = tests("OP test", "Bio-Pos test"),
statistics = statistics("Effect Size in Bio-Neg"),
labels = c("Weighted power"),
par = parameters(alpha = 0.025,
v1 = 1 / (1 + prevalence.pos),
v2 = prevalence.pos / (1 + prevalence.pos),
influence_threshold = 0.186)) +
Criterion(id = "Probability of a broad claim",
method = "subgroup.cs2.BroadClaimPower",
tests = tests("OP test", "Bio-Pos test"),
statistics = statistics("Effect Size in Bio-Neg"),
labels = c("Probability of a broad claim"),
par = parameters(alpha = 0.025,
influence_threshold = 0.186)) +
Criterion(id = "Probability of a restricted claim",
method = "subgroup.cs2.RestrictedClaimPower",
tests = tests("OP test", "Bio-Pos test"),
statistics = statistics("Effect Size in Bio-Neg"),
labels = c("Probability of a restricted claim"),
par = parameters(alpha = 0.025,
influence_threshold = 0.186))
# Simulation Parameters
subgroup.cs2.sim.parameters = SimParameters(n.sims = 100000,
proc.load = "full",
seed = 42938001)
# Perform clinical scenario evaluation
subgroup.cs2.results = CSE(subgroup.cs2.data.model,
subgroup.cs2.analysis.model,
subgroup.cs2.evaluation.model,
subgroup.cs2.sim.parameters)
# Summary of results
summary(subgroup.cs2.results)
# Presentation Model
subgroup.cs2.presentation.model = PresentationModel() +
Project(username = "Gautier Paux",
title = "Case study 1",
description = "Simulation report for case study 2 of the Subgroup Analysis in Clinical Trials") +
Section(by = "outcome.parameter") +
Table(by = "multiplicity.adjustment") +
CustomLabel(param = "multiplicity.adjustment",
label= c("Hochberg"))
# Generate Word-based report
GenerateReport(presentation.model = subgroup.cs2.presentation.model,
cse.results = subgroup.cs2.results,
report.filename = "subgroup-cs2-report.docx")
library(Mediana)
# Outcome parameters
outcome.placebo.neg = parameters(rate = log(2)/7.5)
outcome.treatment.neg = parameters(rate = log(2)/8.5)
outcome.placebo.pos = parameters(rate = log(2)/7.5)
outcome.treatment.pos = parameters(rate = log(2)/12.5)
# Sample size parameters
prevalence.pos = 0.55
sample.size.total = 360
sample.size.placebo.neg = round(((1-prevalence.pos) / 2) * sample.size.total)
sample.size.placebo.pos = round((prevalence.pos / 2 * sample.size.total))
sample.size.treatment.neg = round(((1-prevalence.pos) / 2) * sample.size.total)
sample.size.treatment.pos = round((prevalence.pos / 2 * sample.size.total))
outcome.placebo.neg
outcome.placebo.pos
outcome.treatment.neg
outcome.treatment.pos
# Load the Mediana R package
library(Mediana)
# Outcome parameters
outcome.placebo.neg = parameters(rate = log(2)/7.5)
outcome.treatment.neg = parameters(rate = log(2)/8.5)
outcome.placebo.pos = parameters(rate = log(2)/7.5)
outcome.treatment.pos = parameters(rate = log(2)/12.5)
# Sample size parameters
prevalence.pos = 0.55
sample.size.total = 360
sample.size.placebo.neg = round(((1-prevalence.pos) / 2) * sample.size.total)
sample.size.placebo.pos = round((prevalence.pos / 2 * sample.size.total))
sample.size.treatment.neg = round(((1-prevalence.pos) / 2) * sample.size.total)
sample.size.treatment.pos = round((prevalence.pos / 2 * sample.size.total))
sample.size.placebo.neg
sample.size.placebo.pos
sample.size.treatment.neg
((1-prevalence.pos) / 2) * sample.size.total
source('C:/Users/gauti/CloudStation/Mediana Package/R/Package_v1.0.5/Mediana-gh-pages/subgroup-cs2-mediana.R')
source('C:/Users/gauti/CloudStation/Mediana Package/R/Package_v1.0.5/Mediana-gh-pages/subgroup-cs3-mediana.R')
